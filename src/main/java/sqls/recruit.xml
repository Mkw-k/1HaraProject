<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Recruit">

<!-- 공고작성 -->
<insert id="writerecru" parameterType="java.util.HashMap">
	INSERT ALL
	INTO JOB (JOBSEQ , COMPANYID , JOBTITLE , JOBCONTENT , AREA1NAME,
					AREA2NAME, JOBVOLUMN, SALARY, JOBSTART, JOBEND, EMP_TYPE,
					EDUCATION , CAREER_TYPE, READCOUNT, REGDATE, DEL)
	VALUES (JOB_SEQ.NEXTVAL, #{dto.companyId}, #{dto.jobTitle}, #{dto.jobContent},
			 #{dto.area1Name}, #{dto.area2Name}, #{dto.jobVolumn}, #{dto.salary},
			 <!-- SYSDATE, -->
			 TO_DATE(#{dto.jobStart}, 'YYYY-MM-DD HH24:MI:SS'),
			 TO_DATE(#{dto.jobEnd}, 'YYYY-MM-DD HH24:MI:SS'),
			 #{dto.emp_Type}, #{dto.education}, #{dto.career_Type},
			 0,
			 TO_DATE(SYSDATE, 'YYYY-MM-DD'),
			 0)

		<foreach collection="arrayParam" item="item" index="index" separator="" open="" close="">
			INTO BSCODSTACK (BSCODSTACKSEQ, JOBSEQ, RBUSCODE,  BUSCODE)
			VALUES (BSCODSTACK_SEQ.nextval, JOB_SEQ.nextval, #{item},
	        (SELECT BUSNAME
	        FROM BUSCODE3
	        WHERE BUSCODE = #{item} )
	        )
		</foreach>

		<if test='mgDetail != null'>
		   INTO MGDETAIL (mgdetailseq, jobseq, detailAdress1, detailAdress2,  mgName, mgEmail, mgPhone)
		   VALUES (mgdetail_SEQ.nextval, JOB_SEQ.nextval,
			<foreach collection="mgDetail" item="item" index="index" separator="," open="" close=")">
			#{item}
	    	</foreach>
		</if>

	SELECT 1
	FROM DUAL


</insert>


<delete id="deleteBuscode" parameterType="Integer">
   DELETE FROM BSCODSTACK
   WHERE JOBSEQ = ${jobSeq}
</delete>

<insert id="insertBuscode" parameterType="java.util.HashMap">
   INSERT ALL
   <foreach collection="arrayParam" item="item" index="index" separator="" open="" close="">
      INTO BSCODSTACK (BSCODSTACKSEQ, JOBSEQ, RBUSCODE, BUSCODE)
      VALUES (BSCODSTACK_SEQ.nextval, #{dto.jobSeq } , #{item } ,
         (SELECT BUSNAME
         FROM BUSCODE3
         WHERE BUSCODE = #{item } )
         )

   </foreach>
   SELECT 1
   FROM DUAL

</insert>


<update id="updateRecruit" parameterType="java.util.HashMap">
      UPDATE JOB

      SET JOBTITLE=#{dto.jobTitle} , JOBCONTENT=#{dto.jobContent} , AREA1NAME=#{dto.area1Name}, AREA2NAME=#{dto.area2Name},
               JOBVOLUMN=#{dto.jobVolumn}, SALARY=#{dto.salary}, JOBSTART=TO_DATE(#{dto.jobStart}, 'YYYY-MM-DD HH24:MI:SS'), JOBEND=TO_DATE(#{dto.jobEnd}, 'YYYY-MM-DD HH24:MI:SS'),
               EMP_TYPE=#{dto.emp_Type}, EDUCATION=#{dto.education} , CAREER_TYPE=#{dto.career_Type}



      WHERE JOBSEQ = #{dto.jobSeq}


</update>


<!-- 모든페이지 불러오기 -->
<select id="getallrecrulist" resultType="bit.com.a.dto.RecruitDto">
   SELECT J.JOBSEQ , J.COMPANYID , J.JOBTITLE , J.JOBCONTENT , J.AREA1NAME,
               J.AREA2NAME, J.JOBVOLUMN, J.SALARY, J.JOBSTART, J.JOBEND, J.EMP_TYPE,
               J.EDUCATION , J.CAREER_TYPE, J.CAREER_DESC, J.READCOUNT, J.REGDATE, J.BUSCODE, J.DEL, C.COMPANYNAME,E.EDUNAME
   FROM JOB J, BUSINESS C, EDUCATION E
   WHERE J.COMPANYID = C.MEMBERID AND
        J.EDUCATION = E.EDUCODE
        <!-- AND J.DEL = 0 -->


</select>

<!-- 글의 총수 -->
<select id="getRecruitCount" parameterType="java.util.HashMap" resultType="Integer">
   SELECT COUNT(DISTINCT JOBSEQ)

  FROM (SELECT ROW_NUMBER()OVER(ORDER BY JOBSEQ DESC)AS RNUM, J.JOBSEQ , J.COMPANYID , J.JOBTITLE , J.JOBCONTENT , J.AREA1NAME,
               J.AREA2NAME, J.JOBVOLUMN, J.SALARY, J.JOBSTART, J.JOBEND, J.EMP_TYPE,
               J.EDUCATION , J.CAREER_TYPE, J.CAREER_DESC, J.READCOUNT, J.REGDATE, J.BUSCODE, J.DEL, C.COMPANYNAME
         FROM JOB J, BUSINESS C
         WHERE J.COMPANYID = C.MEMBERID
      <!-- AND J.DEL =0 -->
         <if test="choice != null and choice != ''and search != null and search != ''">
          <if test="choice == 'title'">
               AND J.JOBTITLE LIKE '%'||#{search}||'%'</if>
          <if test="choice == 'companyname'">
               AND C.COMPANYNAME LIKE '%'||#{search}||'%'</if>
         </if>
         )J
   <!-- 회사이름가져오기 -->
   JOIN BUSINESS C
   ON J.COMPANYID = C.MEMBERID
   <!-- 학력조건 가져오기 -->
   JOIN EDUCATION E
    ON E.EDUCODE = J.EDUCATION
   <!-- 고용타입가져오기 -->
   JOIN EMPLOYEE_TYPE T
   ON T.EMP_TYPE = J.EMP_TYPE
   <!-- 경력타입가져오기 -->
   JOIN JOB_CAREERTYPE P
   ON P.CAREER_TYPE = J.CAREER_TYPE
   <!-- 직종네임가져오기 -->
   JOIN bscodstack K
   ON J.JOBSEQ = K.JOBSEQ
   WHERE 1=1
   <!-- 학력조건 -->
   <if test='education != 0'>
     <![CDATA[  AND J.EDUCATION <= ${education}  ]]>
   </if>

   <!-- 경력조건 -->
   <choose>
      <when test = "CareerEnd == 0 ">
         <![CDATA[AND j.career_type >= ${param.careerStart}]]>
      </when>
      <when test = "CareerStart == 0">
         <![CDATA[AND j.career_type <= ${param.careerEnd}]]>
      </when>
      <otherwise>
      AND j.career_type BETWEEN ${param.careerStart} AND ${param.careerEnd}
      </otherwise>
   </choose>

    <!-- 지역코드 2번으로 검색 -->
          <if test="arrAreacode != null and arrAreacode != ''">
      <foreach collection="arrAreacode" item="item" index="index" separator="OR" open="AND(" close=")">
   J.AREA2NAME = #{item}
      </foreach>
         </if>
   <!-- 직무코드2번으로 검색 OR조건 -->
       <if test="arrBusi != null and arrBusi != ''">
      <foreach collection="arrBusi" item="item" index="index" separator="OR" open="AND(" close=" ) ">
   K.RBUSCODE = #{item}
      </foreach>
       </if>

   ORDER BY J.JOBSEQ DESC

</select>

<!-- 글의 총수 -->
<!-- <select id="getRecruitCount" parameterType="bit.com.a.dto.BbsParam" resultType="java.lang.Integer">
   SELECT NVL(COUNT(*), 0) AS CNT
    FROM JOB J, BUSINESS C
   WHERE J.COMPANYID = C.MEMBERID

   AND J.DEL =0

   <if test="choice != null and choice != ''
              and search != null and search != ''">
      AND DEL=0
      <if test="choice == 'title'">
         AND J.JOBTITLE LIKE '%'||#{search}||'%'
      </if>
      <if test="choice == 'companyname'">
         AND C.COMPANYNAME LIKE '%'||#{search}||'%'
      </if>
   </if>

</select> -->

<!-- 페이징 검색 리스트 가져오기 -->
<select id="getRecruitPagingList" parameterType="bit.com.a.dto.BbsParam" resultType="bit.com.a.dto.RecruitDto">
   SELECT J.RNUM, J.JOBSEQ , J.COMPANYID , J.JOBTITLE , J.JOBCONTENT , J.AREA1NAME,
               J.AREA2NAME, J.JOBVOLUMN, J.SALARY, J.JOBSTART, J.JOBEND, J.EMP_TYPE,
               J.EDUCATION , J.CAREER_TYPE, J.READCOUNT, J.REGDATE, J.BUSCODE, J.DEL,
         C.COMPANYNAME, E.EDUNAME, T.EMP_NAME, P.CAREER_DESC


   FROM (SELECT ROW_NUMBER()OVER(ORDER BY JOBSEQ DESC)AS RNUM, J.JOBSEQ , J.COMPANYID , J.JOBTITLE , J.JOBCONTENT , J.AREA1NAME,
               J.AREA2NAME, J.JOBVOLUMN, J.SALARY, J.JOBSTART, J.JOBEND, J.EMP_TYPE,
               J.EDUCATION , J.CAREER_TYPE, J.CAREER_DESC, J.READCOUNT, J.REGDATE, J.BUSCODE, J.DEL, C.COMPANYNAME
         FROM JOB J, BUSINESS C
         WHERE J.COMPANYID = C.MEMBERID

         <!-- AND J.DEL =0 -->

         <if test="choice != null and choice != ''
              and search != null and search != ''">


            <if test="choice == 'title'">
            AND J.JOBTITLE LIKE '%'||#{search}||'%'
            </if>

            <if test="choice == 'companyname'">
            AND C.COMPANYNAME LIKE '%'||#{search}||'%'
            </if>
         </if>
         )J
   <!-- 회사이름가져오기 -->
   JOIN BUSINESS C
   ON J.COMPANYID = C.MEMBERID
   <!-- 학력조건 가져오기 -->
   JOIN EDUCATION E
    ON E.EDUCODE = J.EDUCATION
   <!-- 고용타입가져오기 -->
   JOIN EMPLOYEE_TYPE T
   ON T.EMP_TYPE = J.EMP_TYPE
   <!-- 경력타입가져오기 -->
   JOIN JOB_CAREERTYPE P
   ON P.CAREER_TYPE = J.CAREER_TYPE
   WHERE RNUM BETWEEN ${start} AND ${end}
   ORDER BY J.JOBSEQ DESC


</select>


<!-- 최종 상세 검색 리스트 가져오기 -->
<select id="getRecruitSearchList" parameterType="java.util.HashMap" resultType="bit.com.a.dto.RecruitDto">
   SELECT DISTINCT RNUM, J.JOBSEQ , J.COMPANYID , J.JOBTITLE , J.JOBCONTENT , J.AREA1NAME,
               J.AREA2NAME, J.JOBVOLUMN, J.SALARY, J.JOBSTART, J.JOBEND, J.EMP_TYPE,
               J.EDUCATION , J.CAREER_TYPE, J.READCOUNT, J.REGDATE, J.BUSCODE, J.DEL,
         C.COMPANYNAME, E.EDUNAME, T.EMP_NAME, P.CAREER_DESC

   FROM (SELECT ROW_NUMBER()OVER(ORDER BY JOBSEQ DESC)AS RNUM, J.JOBSEQ , J.COMPANYID , J.JOBTITLE , J.JOBCONTENT , J.AREA1NAME,
               J.AREA2NAME, J.JOBVOLUMN, J.SALARY, J.JOBSTART, J.JOBEND, J.EMP_TYPE,
               J.EDUCATION , J.CAREER_TYPE, J.CAREER_DESC, J.READCOUNT, J.REGDATE, J.BUSCODE, J.DEL, C.COMPANYNAME
         FROM JOB J, BUSINESS C
         WHERE J.COMPANYID = C.MEMBERID
      <!-- AND J.DEL =0 -->
         <if test="choice != null and choice != ''and search != null and search != ''">
          <if test="choice == 'title'">
               AND J.JOBTITLE LIKE '%'||#{search}||'%'</if>
          <if test="choice == 'companyname'">
               AND C.COMPANYNAME LIKE '%'||#{search}||'%'</if>
         </if>
         )J
   <!-- 회사이름가져오기 -->
   JOIN BUSINESS C
   ON J.COMPANYID = C.MEMBERID
   <!-- 학력조건 가져오기 -->
   JOIN EDUCATION E
    ON E.EDUCODE = J.EDUCATION
   <!-- 고용타입가져오기 -->
   JOIN EMPLOYEE_TYPE T
   ON T.EMP_TYPE = J.EMP_TYPE
   <!-- 경력타입가져오기 -->
   JOIN JOB_CAREERTYPE P
   ON P.CAREER_TYPE = J.CAREER_TYPE
   <!-- 직종네임가져오기 -->
   JOIN bscodstack K
   ON J.JOBSEQ = K.JOBSEQ
   WHERE 1=1
   <!-- 학력조건 -->
   <if test='education != 0'>
     <![CDATA[  AND J.EDUCATION <= ${education}  ]]>
   </if>

   <!-- 경력조건 -->
   <choose>
      <when test = "CareerEnd == 0 ">
         <![CDATA[AND j.career_type >= ${param.careerStart}]]>
      </when>
      <when test = "CareerStart == 0">
         <![CDATA[AND j.career_type <= ${param.careerEnd}]]>
      </when>
      <otherwise>
      AND j.career_type BETWEEN ${param.careerStart} AND ${param.careerEnd}
      </otherwise>
   </choose>

    <!-- 지역코드 2번으로 검색 -->
          <if test="arrAreacode != null and arrAreacode != ''">
      <foreach collection="arrAreacode" item="item" index="index" separator="OR" open="AND(" close=")">
   J.AREA2NAME = #{item}
      </foreach>
         </if>
   <!-- 직무코드2번으로 검색 OR조건 -->
       <if test="arrBusi != null and arrBusi != ''">
      <foreach collection="arrBusi" item="item" index="index" separator="OR" open="AND(" close=" ) ">
   K.RBUSCODE = #{item}
      </foreach>
       </if>
   AND RNUM BETWEEN ${param.start} AND ${param.end}
   ORDER BY J.JOBSEQ DESC

</select>

<!-- 디테일페이지용 -->
<select id="getRecruitListOne" parameterType="Integer" resultType="bit.com.a.dto.RecruitDto">
SELECT J.JOBSEQ , J.COMPANYID , J.JOBTITLE , J.JOBCONTENT , J.AREA1NAME,
               J.AREA2NAME, J.JOBVOLUMN, J.SALARY, J.JOBSTART, J.JOBEND, J.EMP_TYPE,
               J.EDUCATION , J.CAREER_TYPE, J.READCOUNT, J.REGDATE, J.DEL, C.COMPANYNAME, P.CAREER_DESC,
               E.EDUNAME, T.EMP_NAME, D.detailAdress1, D.detailAdress2, D.mgName, D.mgPhone, D.mgEmail
FROM JOB J, BUSINESS C, EDUCATION E, JOB_CAREERTYPE P, EMPLOYEE_TYPE T, MGDETAIL D
WHERE J.COMPANYID = C.MEMBERID AND
     J.EDUCATION = E.EDUCODE AND
     P.CAREER_TYPE = J.CAREER_TYPE AND
     T.EMP_TYPE = J.EMP_TYPE AND
     J.JOBSEQ = D.JOBSEQ AND
     J.JOBSEQ = ${jobseq}
</select>

<select id="getBsnameForDetail" parameterType="Integer" resultType="String">
SELECT BUSCODE
FROM BSCODSTACK
WHERE JOBSEQ = ${jobseq}
</select>


<!-- 조회수 늘려주기 -->
<update id="RecuReadcount" parameterType="Integer">
   UPDATE JOB
   SET READCOUNT = READCOUNT +1
   WHERE JOBSEQ = #{jobseq}

</update>

<!-- 삭제기능 -->
<update id="deleteRecruit" parameterType="Integer">
   UPDATE JOB
   SET DEL=1
   WHERE JOBSEQ=#{jobseq}
</update>

<!-- 직무분류코드1(대분류) 불러오기 : 공고작성 페이지에 뿌려주기위함 -->
<select id="buscodeListData" resultType="bit.com.a.dto.RecruitParam">
   SELECT *
   FROM BUSCODE1
</select>

<!-- 직무분류코드2(중분류) 불러오기 : 공고작성 페이지에 뿌려주기위함 // 선택된 라디오버튼의 밸류값을 받아옴 -->
<select id="buscode2ListData" parameterType="Integer" resultType="bit.com.a.dto.RecruitParam">
   SELECT *
   FROM BUSCODE2
   WHERE BUSCODE2 LIKE ${buscode}||'%'

</select>

<!-- 직무분류코드3(소분류) 불러오기 : 공고작성 페이지에 뿌려주기위함 // 선택된 라디오버튼의 밸류값을 받아옴-->
<!-- buscode3테이블에 데이터는 buscode와 busname임!! -->
<select id="buscode3ListData" parameterType="Integer" resultType="bit.com.a.dto.RecruitParam">
   SELECT *
   FROM BUSCODE3
   WHERE BUSCODE LIKE ${buscode}||'%'

</select>

<select id="getCalendarList" parameterType="bit.com.a.dto.RecruitDto"
   resultType="bit.com.a.dto.RecruitDto">
SELECT JOBSEQ, JOBTITLE, JOBCONTENT,
         JOBSTART
        ,JOBEND
   FROM (SELECT ROW_NUMBER()OVER(PARTITION BY SUBSTR(JOBSTART, 1, 7)ORDER BY JOBSTART ASC) AS RNUM,
         JOBSEQ, JOBTITLE, JOBCONTENT, JOBSTART, JOBEND
        FROM JOB)
 WHERE RNUM BETWEEN 1 AND 5

</select>

<!-- 지역분류코드1(대분류) 불러오기 : 공고리스트에 데이터 뿌려주기위함 (검색용) -->
<select id="areacodeListData" resultType="bit.com.a.dto.RecruitParam">
   SELECT *
   FROM JOBAREA1
</select>


<!-- 선택된 대분류 값이 NAME이어서 NAME을 통해 CODE를 출력함  // 선택된 셀렉트박스의 밸류값을 받아옴-->
<select id="getArea1Code" parameterType="String" resultType="Integer">
   SELECT AREA1CODE
   FROM JOBAREA1
   WHERE AREA1NAME LIKE #{areaname}||'%'
</select>


<!-- 지역분류코드2(소분류) 불러오기 : 공고리스트에 데이터 뿌려주기위함 (검색용) // 선택된 셀렉트박스의 밸류값을 받아옴 -->
<select id="areacode2ListData" parameterType="Integer" resultType="bit.com.a.dto.RecruitParam">
   SELECT *
   FROM JOBAREA2
   WHERE AREA2CODE LIKE ${areacode}||'%'
</select>

<!-- 채용 담당자 정보 수정  -->
<update id="mgDetailUpdate" parameterType="bit.com.a.dto.RecruitDto">
   UPDATE MGDETAIL
   SET detailAdress1 = #{detailAdress1}, detailAdress2 = #{detailAdress2}, mgName = #{mgName}, mgPhone = #{mgPhone}, mgEmail = #{mgEmail}
   WHERE JOBSEQ=#{jobSeq}
</update>

<update id="mgDetailUpdate2" parameterType="bit.com.a.dto.RecruitDto">
	UPDATE JOB
	SET AREA1NAME = #{area1Name}, AREA2NAME = #{area2Name}, JOBSTART = #{jobStart}, JOBEND =#{jobEnd}
	WHERE JOBSEQ = #{jobSeq}
</update>

<!-- <insert id="favoriteJob">
	INSERT INTO JOBFAVORITE (JFSEQ, JOBSEQ, MEMBERID)
	VALUES(JOBFAVORITE_SEQ.NEXTVAL, #{jobSeq}, #{memberid}

</insert> -->

</mapper>
